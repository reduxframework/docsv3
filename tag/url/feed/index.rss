<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>url &#8211; Redux Documentation</title>
	<atom:link href="https://docs.reduxframework.com/tag/url/feed/" rel="self" type="application/rss+xml" />
	<link>https://docs.reduxframework.com</link>
	<description>Docs for the Redux Framework</description>
	<lastBuildDate>Tue, 31 Jul 2018 15:27:44 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.0.3</generator>
	<item>
		<title>JS Button</title>
		<link>https://docs.reduxframework.com/extensions/js-button/</link>
		<comments>https://docs.reduxframework.com/extensions/js-button/#respond</comments>
		<pubDate>Thu, 27 Nov 2014 01:59:16 +0000</pubDate>
		<dc:creator><![CDATA[Kevin]]></dc:creator>
				<category><![CDATA[Extensions]]></category>
		<category><![CDATA[buttons]]></category>
		<category><![CDATA[class]]></category>
		<category><![CDATA[dep]]></category>
		<category><![CDATA[desc]]></category>
		<category><![CDATA[hint]]></category>
		<category><![CDATA[id]]></category>
		<category><![CDATA[script]]></category>
		<category><![CDATA[subtitle]]></category>
		<category><![CDATA[title]]></category>
		<category><![CDATA[type]]></category>
		<category><![CDATA[url]]></category>
		<category><![CDATA[ver]]></category>

		<guid isPermaLink="false">http://docs.reduxframework.com/?p=712</guid>
		<description><![CDATA[<p>The Redux JS Button extension is a new way to activate JavaScript functions manually from within the options panel.  Once you&#8217;ve set up the field code with the buttons you&#8217;d like to display, you simply assign a JavaScript function name to the button, include that function in a JavaScript file assigned to the field and [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://docs.reduxframework.com/extensions/js-button/">JS Button</a> appeared first on <a rel="nofollow" href="https://docs.reduxframework.com">Redux Documentation</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>The Redux JS Button extension is a new way to activate JavaScript functions manually from within the options panel.  Once you&#8217;ve set up the field code with the buttons you&#8217;d like to display, you simply assign a JavaScript function name to the button, include that function in a JavaScript file assigned to the field and watch the magic happen!</p>
<h2>Getting Started</h2>
<p>To understand how to use extensions, you should read this article on <a href="/redux-framework/advanced/loading-extensions/">Loading Extensions</a>. To shortcut the process, you should use the <a href="http://generate.reduxframework.com/" target="_blank">Redux Generator</a>. Please be aware that a working knowledge of PHP and CSS is required to properly use this field. Should you not be familiar with one or the other (or both), please refer to the basic guides to get you <br />started: <a href="http://www.php.net/manual/en/tutorial.php">Getting Started with PHP</a>, <a href="http://www.w3schools.com/css/css_intro.asp">CSS Introduction</a>.</p>
<p>Also, knowledge of JavaScript and/or jQuery is required to author your own functions.  This extension does all the work behind the scenes to trigger your custom functions, but to accomplish anything when the buttons are clicked, you&#8217;ll need to be able to author your own code.</p>
<h2>Arguments</h2>
<table border="0">
<tbody>
<tr>
<td style="text-align: center;"><strong>Name</strong></td>
<td style="text-align: center;"><strong>Type</strong></td>
<td style="text-align: center;"><strong>Default</strong></td>
<td style="text-align: center;"><strong>Description</strong></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>&#8216;js_button&#8217;</td>
<td>Value identifying the field type.</td>
</tr>
<tr>
<td>id</td>
<td>string</td>
<td></td>
<td>Unique ID identifying the field. Must be different from all other field IDs.</td>
</tr>
<tr>
<td>title</td>
<td>string</td>
<td></td>
<td>Displays title of the field.</td>
</tr>
<tr>
<td>subtitle</td>
<td>string</td>
<td></td>
<td>Subtitle display of the field, situated beneath the title.</td>
</tr>
<tr>
<td>desc</td>
<td>string</td>
<td></td>
<td>Description of the field, appearing beneath the field control.</td>
</tr>
<tr>
<td>class</td>
<td>string</td>
<td></td>
<td>Appends any number of classes to the field&#8217;s class attribute.</td>
</tr>
<tr>
<td>script</td>
<td>array</td>
<td></td>
<td>Array of key/pair values defining the JavaScript file containing button functions.  See &#8216;Setting up the Script Argument&#8217; below.</td>
</tr>
<tr>
<td>buttons</td>
<td>array</td>
<td></td>
<td>Set of arrays defining the buttons to display.  Please see &#8216;Setting up Buttons&#8217; below.</td>
</tr>
<tr>
<td>hint</td>
<td>array</td>
<td></td>
<td>Array containing the <code>content</code> and optional <code>title</code> arguments for the hint tooltip. <a class="more_info" title="Using Hints in Fields" href="/redux-framework/the-basics/using-hints-in-fields/"><i class="el-icon-circle-arrow-right"></i>More info</a></td>
</tr>
</tbody>
</table>
<h2>Settings up the Script Argument</h2>
<p>The script argument sets up the JavaScript file and associated options, so that when a JavaScript button is clicked, it knows where to search for the function associated with it.  These arguments mirror the WordPress <a target="_blank" href="http://codex.wordpress.org/Function_Reference/wp_enqueue_script">wp_enqueue_script</a> function parameters, as the extension uses this WordPress API to enqueue your script..</p>
<table border="0">
<tbody>
<tr>
<td style="text-align: center;"><strong>Name</strong></td>
<td style="text-align: center;"><strong>Type</strong></td>
<td style="text-align: center;"><strong>Default</strong></td>
<td style="text-align: center;"><strong>Description</strong></td>
</tr>
<tr>
<td>url</td>
<td>string</td>
<td></td>
<td>Fully qualified URL to and including the JavaScript file name.  See Notes below.</td>
</tr>
<tr>
<td>dep</td>
<td>array</td>
<td></td>
<td>Array of the handles of all the registered scripts that this script depends on, that is the scripts that must be loaded before this script. This parameter is only required when the script with the given <tt>$handle</tt> has not been already registered using <tt><a href="http://codex.wordpress.org/Function_Reference/wp_register_script" title="Function Reference/wp register script">wp_register_script()</a></tt>. Default handles are all in lower case.</td>
</tr>
<tr>
<td>ver</td>
<td>string</td>
<td>time()</td>
<td>String specifying the script version number, if it has one, which is concatenated to the end of the path as a query string.</td>
</tr>
<tr>
<td>in_footer</td>
<td>bool</td>
<td>true</td>
<td>Normally, scripts are placed in <tt>&lt;head&gt;</tt> of the HTML document. If this parameter is <i>true</i>, the script is placed before the <tt>&lt;/body&gt;</tt> end tag.</td>
</tr>
</tbody>
</table>
<p><strong>NOTES</strong>:  While it doesn&#8217;t matter where you might choose to store your script, it is important to never hard code the path to the script&#8217;s location.  To get a proper URL to local scripts, use <tt><a href="http://codex.wordpress.org/Function_Reference/plugins_url" title="Function Reference/plugins url">plugins_url()</a></tt> for plugins and <tt><a href="http://codex.wordpress.org/Function_Reference/get_template_directory_uri" title="Function Reference/get template directory uri">get_template_directory_uri()</a></tt> for themes. </p>
<h2>Setting Up Buttons</h2>
<p>The <code>buttons</code> argument accepts a single array populated by arrays that accept the following arguments:</p>
<table border="0">
<tbody>
<tr>
<td style="text-align: center;"><strong>Name</strong></td>
<td style="text-align: center;"><strong>Type</strong></td>
<td style="text-align: center;"><strong>Default</strong></td>
<td style="text-align: center;"><strong>Description</strong></td>
</tr>
<tr>
<td>text</td>
<td>string</td>
<td></td>
<td>Required. The text to appear as the button&#8217;s caption</td>
</tr>
<tr>
<td>class</td>
<td>string</td>
<td></td>
<td>Optional.  Any additional class names to append to the buttons class parameter.</td>
</tr>
<tr>
<td>function</td>
<td>string</td>
<td></td>
<td>Required.  The name of the function to call inside the script passed via the <code>scripts</code> argument.</td>
</tr>
</tbody>
</table>
<p></p>
<h2>Example Declaration</h2>
<p>For this example (included in the download), assume we&#8217;ve placed our javascript file in the theme&#8217;s root directory. We can easily obtain it&#8217;s location using <code>get_template_directory_uri()</code>. Since our example javascript (shown below) uses jQuery, we must pass the jQuery dependency via the <code>scripts</code> <code>dep</code> argument.</p>
<pre class="brush: php; title: ; notranslate">
array (
    'id'            =&gt; 'opt-js-button',
    'type'          =&gt; 'js_button',
    'title'         =&gt; 'JS Button',
    'subtitle'      =&gt; 'Run javascript manually from the options panel.',
    'script'        =&gt; array(
        'url'       =&gt; get_template_directory_uri() .  '/sample.js',
        'dep'       =&gt; array('jquery'),
        'ver'       =&gt; time(),
        'in_footer' =&gt; true
    ),
    'buttons'       =&gt; array(
        array(
            'text'      =&gt; 'Add Date',

            // This class causes the button to appear colored in the options panel
            'class'     =&gt; 'button-primary',

            // The name of the function to execute in the sample.js file
            'function'  =&gt; 'redux_add_date'
        ),
        array(
            'text'      =&gt; 'Alert',
            'class'     =&gt; 'button-secondary',

            // The name of the function to execute in the sample.js file
            'function'  =&gt; 'redux_show_alert'
        ),
    ),
),

// This empty text field will be used for the redux_add_date function to fill out 
// with the current date, when the button is clicked.
array(
    'id'        =&gt; 'opt-blank-text',
    'type'      =&gt; 'text',
    'title'     =&gt; 'Date',
),
</pre>
<h3>Example JavaScript File: sample.js</h3>
<pre class="brush: jscript; title: ; notranslate">
// Function to execute when the Add Date button is clicked.
function redux_add_date() {
    (function($){
        'use strict';

        $(document).ready(function(){
            var date = new Date();
            var text = $('#opt-blank-text');
            
            text.val(date.toString());
        });    
    })(jQuery)    
};

// Function to execute when the Alert button is clicked.
function redux_show_alert() {
    alert ('You clicked the Alert button!');
};
</pre>
<p>The post <a rel="nofollow" href="https://docs.reduxframework.com/extensions/js-button/">JS Button</a> appeared first on <a rel="nofollow" href="https://docs.reduxframework.com">Redux Documentation</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://docs.reduxframework.com/extensions/js-button/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Slides</title>
		<link>https://docs.reduxframework.com/core/fields/slides/</link>
		<pubDate>Mon, 10 Mar 2014 22:39:53 +0000</pubDate>
		<dc:creator><![CDATA[Kevin]]></dc:creator>
				<category><![CDATA[Fields]]></category>
		<category><![CDATA[attachment_id]]></category>
		<category><![CDATA[class]]></category>
		<category><![CDATA[compiler]]></category>
		<category><![CDATA[desc]]></category>
		<category><![CDATA[description]]></category>
		<category><![CDATA[height]]></category>
		<category><![CDATA[hint]]></category>
		<category><![CDATA[id]]></category>
		<category><![CDATA[image]]></category>
		<category><![CDATA[permissions]]></category>
		<category><![CDATA[placeholder]]></category>
		<category><![CDATA[required]]></category>
		<category><![CDATA[sort]]></category>
		<category><![CDATA[subtitle]]></category>
		<category><![CDATA[thumb]]></category>
		<category><![CDATA[title]]></category>
		<category><![CDATA[type]]></category>
		<category><![CDATA[url]]></category>
		<category><![CDATA[width]]></category>

		<guid isPermaLink="false">http://docs.reduxframework.com/?p=119</guid>
		<description><![CDATA[<p>With the Slider field, unlimited slides may be created with titles, descriptions and links. Arguments Name Type Default Description type string &#8216;slides&#8217; Value identifying the field type. id string Unique ID identifying the field. Must be different from all other field IDs. title string Displays title of the option. subtitle string Subtitle display of the [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://docs.reduxframework.com/core/fields/slides/">Slides</a> appeared first on <a rel="nofollow" href="https://docs.reduxframework.com">Redux Documentation</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p style="text-align: justify;">With the Slider field, unlimited slides may be created with titles, descriptions and links.</p>
<p style="text-align: center;"><img src="https://f.cloud.github.com/assets/3412363/1575597/31edabc2-5150-11e3-8e72-3819ed12e976.png" alt="Slides Field" height="441" width="807" /></p>
<hr />
<h3 style="text-align: left;">Arguments</h3>
<table border="0">
<tbody>
<tr>
<td style="text-align: center;"><strong>Name</strong></td>
<td style="text-align: center;"><strong>Type</strong></td>
<td style="text-align: center;"><strong>Default</strong></td>
<td style="text-align: center;"><strong>Description</strong></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>&#8216;slides&#8217;</td>
<td>Value identifying the field type.</td>
</tr>
<tr>
<td>id</td>
<td>string</td>
<td></td>
<td>Unique ID identifying the field. Must be different from all other field IDs.</td>
</tr>
<tr>
<td>title</td>
<td>string</td>
<td></td>
<td>Displays title of the option.</td>
</tr>
<tr>
<td>subtitle</td>
<td>string</td>
<td></td>
<td>Subtitle display of the option, situated beneath the title.</td>
</tr>
<tr>
<td>desc</td>
<td>string</td>
<td></td>
<td>Description of the option, appearing beneath the field control.</td>
</tr>
<tr>
<td>class</td>
<td>string</td>
<td></td>
<td>Appends any number of classes to the field&#8217;s class attribute.</td>
</tr>
<tr>
<td>compiler</td>
<td>bool</td>
<td></td>
<td>Flag to run the compiler hook. <a class="more_info" href="/redux-framework/integrating-a-compiler/"><i class="el-icon-circle-arrow-right"></i> More info</a></td>
</tr>
<tr>
<td>required</td>
<td>array</td>
<td></td>
<td>Provide the parent, comparison operator, and value which affects the field&#8217;s visibility. <a class="more_info" href="/redux-framework/the-basics/the-required-argument/"><i class="el-icon-circle-arrow-right"></i> More info</a></td>
</tr>
<tr>
<td>placeholder</td>
<td>array</td>
<td></td>
<td>Array of placeholder values.  See &#8216;Placeholder Values&#8217; below.</td>
</tr>
<tr>
<td>permissions</td>
<td>string</td>
<td></td>
<td>String specifying the capability required to view the section. <a class="more_info" href="/redux-framework/fields/using-permissions/"> <i class="el-icon-circle-arrow-right"></i> More info.</a></td>
</tr>
<tr>
<td>hint</td>
<td>array</td>
<td></td>
<td>Array containing the <code>content</code> and optional <code>title</code> arguments for the hint tooltip. <a class="more_info" title="Using Hints in Fields" href="/redux-framework/the-basics/using-hints-in-fields/"><i class="el-icon-circle-arrow-right"></i> More info</a></td>
</tr>
</tbody>
</table>
<ul class="more_info_list">
<li><a class="more_info" title="The ‘Required’ Argument" href="/redux-framework/the-basics/the-required-argument/"><i class="el-icon-circle-arrow-right"></i> Using the Required Argument</a></li>
<li><a class="more_info" title="Integrating a Compiler" href="/redux-framework/integrating-a-compiler/"><i class="el-icon-circle-arrow-right"></i> Using the Compiler Argument</a></li>
<li><a class="more_info" title="The ‘Permissions’ Argument" href="/redux-framework/fields/using-permissions/"><i class="el-icon-circle-arrow-right"></i> Using the Permissions Argument</a></li>
<li><a class="more_info" title="Using Hints in Fields" href="/redux-framework/the-basics/using-hints-in-fields/"><i class="el-icon-circle-arrow-right"></i> Using Hints</a></li>
</ul>
<h3>Placeholder Values</h3>
<table border="0">
<tbody>
<tr>
<td style="text-align: center;"><strong>Name</strong></td>
<td style="text-align: center;"><strong>Type</strong></td>
<td style="text-align: center;"><strong>Description</strong></td>
</tr>
<tr>
<td>title</td>
<td>string</td>
<td>Placeholder for the title field.</td>
</tr>
<tr>
<td>description</td>
<td>string</td>
<td>Placeholder for the description field.</td>
</tr>
<tr>
<td>sort</td>
<td>string</td>
<td>Sort number for the slide order.</td>
</tr>
<tr>
<td>url</td>
<td>string</td>
<td>Placeholder for the URL field.</td>
</tr>
<tr>
<td>image</td>
<td>string</td>
<td>Placeholder for the image text field.</td>
</tr>
<tr>
<td>thumb</td>
<td>string</td>
<td>Placeholder for the image select field.</td>
</tr>
<tr>
<td>attachment_id</td>
<td>string</td>
<td>Placeholder image in URL format.</td>
</tr>
<tr>
<td>height</td>
<td>string</td>
<td>Placeholder height for the preview image.</td>
</tr>
<tr>
<td>width</td>
<td>string</td>
<td>Placeholder width for the preview image.</td>
</tr>
</tbody>
</table>
<hr />
<h3>Example Declaration</h3>
<pre class="brush: php; title: ; notranslate">
    $fields = array(
        'id'          =&gt; 'opt-slides',
        'type'        =&gt; 'slides',
        'title'       =&gt; __('Slides Options', 'redux-framework-demo'),
        'subtitle'    =&gt; __('Unlimited slides with drag and drop sortings.', 'redux-framework-demo'),
        'desc'        =&gt; __('This field will store all slides values into a multidimensional array to use into a foreach loop.', 'redux-framework-demo')
        'placeholder' =&gt; array(
            'title'           =&gt; __('This is a title', 'redux-framework-demo'),
            'description'     =&gt; __('Description Here', 'redux-framework-demo'),
            'url'             =&gt; __('Give us a link!', 'redux-framework-demo'),
        ),
    ),
</pre>
<h3>Example Usage</h3>
<p>This example assumes at least one slide has been filled out and saved, based on the example usage provided above. Individual slide information are stored in a zero-based array. Be sure to change <code>$redux_demo</code> to the value you specified in your <a title="opt_name" href="/redux-framework/arguments/opt_name/"><code>opt_name</code> argument.</a></p>
<p><strong>IMPORTANT NOTE:</strong>  Redux Framework does NOT save blank slides to the database.  This means on the initial load of your options panel, the empty slide will not be available.  It will be necessary to use <code>isset</code> and <code>!empty</code> checks on the slide variable before attempting to use it in your code, as shown below.</p>
<pre class="brush: php; title: ; notranslate">
global $redux_demo;

if (isset($redux_demo['opt-slides']) &amp;&amp; !empty($redux_demo['opt-slides'])) {
    echo 'Slide 1 Title: '         . $redux_demo['opt-slides'][0]['title'];
    echo 'Slide 1 Description: '   . $redux_demo['opt-slides'][0]['description'];
    echo 'Slide 1 URL: '           . $redux_demo['opt-slides'][0]['url'];
    echo 'Slide 1 Attachment ID: ' . $redux_demo['opt-slides'][0]['attachment_id'];
    echo 'Slide 1 Thumb: '         . $redux_demo['opt-slides'][0]['thumb'];
    echo 'Slide 1 Image: '         . $redux_demo['opt-slides'][0]['image'];
    echo 'Slide 1 Width: '         . $redux_demo['opt-slides'][0]['width'];
    echo 'Slide 1 Height: '        . $redux_demo['opt-slides'][0]['height'];
}
</pre>
<p>The post <a rel="nofollow" href="https://docs.reduxframework.com/core/fields/slides/">Slides</a> appeared first on <a rel="nofollow" href="https://docs.reduxframework.com">Redux Documentation</a>.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>
